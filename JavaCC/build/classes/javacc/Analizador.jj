options{
STATIC = false;
DEBUG_LOOKAHEAD = false;
}
PARSER_BEGIN(SimpLeng)
package javacc;
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

public class SimpLeng{


boolean Menosshort = false; //Salida resumida falso
String resultado = "";

//#################################################################
semantico semanticopo;

public void setTextArea(JTextArea text) 
{
    semanticopo= new semantico(text);
}
//##################################################################


public void procesar() throws Exception{
Token t = new Token ();
resultado="";

do {
t = getNextToken(); //Obtiene el proximo token
String nomeToken = tokenImage[t.kind]; //Guardar nombre del token en String
resultado=resultado+t.image;
switch(t.kind){
    case 0:
        resultado=resultado+"\n";
    break;
    case 5:
        resultado=resultado+",PR_Pkg\n";
    break;
    case 6:
        resultado=resultado+",PR_Mn\n";
    break;
    case 7:
        resultado=resultado+",PR_imp\n";
    break;
    case 8:
        resultado=resultado+",PR_DV\n";
    break;
    case 9:
        resultado=resultado+",PR_fmt\n";
    break;
    case 10:
        resultado=resultado+",PR_Scan\n";
    break;
    case 11:
        resultado=resultado+",PR_print\n";
    break;
    case 12:
        resultado=resultado+",PR_If\n";
    break;
    case 13:
        resultado=resultado+",PR_Else\n";
    break;
    case 14:
        resultado=resultado+",PR_For\n";
    break;
    case 15:
        resultado=resultado+",PR_Return\n";
    break;
    case 16:
        resultado=resultado+",PR_Funcion\n";
    break;
    case 17:
        resultado=resultado+",D_ParentI\n";
    break;
    case 18:
        resultado=resultado+",D_ParentD\n";
    break;
    case 19:
        resultado=resultado+",D_CorchI\n";
    break;
    case 20:
        resultado=resultado+",D_CorchD\n";
    break;
    case 21:
        resultado=resultado+",D_LlaveI\n";
    break;
    case 22:
        resultado=resultado+",D_LlaveD\n";
    break;
    case 23:
        resultado=resultado+",D_Coma\n";
    break;
    case 24:
        resultado=resultado+",OC_Mas\n";
    break;
    case 25:
        resultado=resultado+",OC_Menos\n";
    break;
    case 26:
        resultado=resultado+",OC_Por\n";
    break;
    case 27:
        resultado=resultado+",OC_Entre\n";
    break;
    case 28:
        resultado=resultado+",OC_Menor\n";
    break;
    case 29:
        resultado=resultado+",OC_Mayor\n";
    break;
    case 30:
        resultado=resultado+",OC_MenorI\n";
    break;
    case 31:
        resultado=resultado+",OC_MayorI\n";
    break;
    case 32:
        resultado=resultado+",OC_Asignar\n";
    break;
    case 33:
        resultado=resultado+",OC_Diferente\n";
    break;
    case 34:
        resultado=resultado+",OC_Punto\n";
    break;
    case 35:
        resultado=resultado+",OC_Comilla\n";
    break;
    case 36:
        resultado=resultado+",OC_Comilla\n";
    break;
    case 37:
        resultado=resultado+",OC_Igual\n";
    break;
    case 38:
        resultado=resultado+",OC_Increm\n";
    break;
    case 39:
        resultado=resultado+",OC_Decrem\n";
    break;
    case 40:
        resultado=resultado+",OC_PuntCom\n";
    break;
    case 41:
        resultado=resultado+",OC_Espace\n";
    break;
    case 42:
        resultado=resultado+",PR_true\n";
    break;
    case 43:
        resultado=resultado+",PR_false\n";
    break;
    case 44:
        resultado=resultado+",T_Int\n";
    break;
    case 45:
        resultado=resultado+",T_Float\n";
    break;
    case 46:
        resultado=resultado+",T_String\n";
    break;
    case 47:
        resultado=resultado+",T_Bool\n";
    break;
    case 48:
        resultado=resultado+",S_admiI\n";
    break;
    case 49:
        resultado=resultado+",S_admiD\n";
    break;
    case 50:
        resultado=resultado+",S_gato\n";
    break;
    case 51:
        resultado=resultado+",S_pesos\n";
    break;
    case 52:
        resultado=resultado+",S_and\n";
    break;
    case 53:
        resultado=resultado+",S_interrogaI\n";
    break;
    case 54:
        resultado=resultado+",S_interrogaD\n";
    break;
    case 58:
        resultado=resultado+",Number\n";
    break;
    case 59:
        resultado=resultado+",Constante\n";
    break;
    case 60:
        resultado=resultado+",Variable\n";
    break;
    case 61:
        resultado=resultado+",String\n";
    break;
    
    
}
} while(t.kind!=0); //Condicion de parada: Final del archivo (constante eof 0 )
}

public static void main(String args[], String x) throws ParseException, FileNotFoundException {
try {
}catch (Error e){
System.out.println(e.getMessage()); //Mensaje de error lexico
}
}
}
PARSER_END(SimpLeng)

SKIP : // TOKENS IGNORADOS
{
 " "
| "\r" 
| "\t" 
| "\n"
}

TOKEN : //PALABRAS RESERVADAS
{
<PR_Pkg: "package"> 
{System.out.println("PR_Pkg," + image);}
|
<PR_Mn: "main"> 
{System.out.println("PR_Mn," + image);}
|
<PR_imp: "import">
{System.out.println("PR_imp," + image);}
|
<PR_DV: "var">
{System.out.println("PR_DV," + image);}
|
<PR_fmt: "fmt">
{System.out.println("PR_fmt," + image);}
|
<PR_Scan: "Scan">
{System.out.println("PR_Scan," + image);}
|
<PR_print: "Println">
{System.out.println("PR_print," + image);}
|
<PR_If: "if">
{System.out.println("PR_If," + image);}
|
<PR_Else: "else">
{System.out.println("PR_Else," + image);}
|
<PR_For: "for">
{System.out.println("PR_For," + image);}
|
<PR_Return: "return">
{System.out.println("PR_Return," + image);}
|
<PR_Funcion: "func">
{System.out.println("PR_Funcion," + image);}
|
<D_ParentI: "(">
{System.out.println("D_ParentI," + image);}
|
<D_ParentD: ")">
{System.out.println("D_ParentD," + image);}
|
<D_CorchI: "[">
{System.out.println("D_CorchI," + image);}
|
<D_CorchD: "]">
{System.out.println("D_CorchD," + image);}
|
<D_LlaveI: "{">
{System.out.println("D_LlaveI," + image);}
|
<D_LlaveD: "}">
{System.out.println("D_LlaveD," + image);}
|
<D_Coma: ",">
{System.out.println("D_Coma," + image);}
|
<OC_Mas: "+">
{System.out.println("OC_Mas," + image);}
|
<OC_Menos: "-">
{System.out.println("OC_Menos," + image);}
|
<OC_Por: "*">
{System.out.println("OC_Por," + image);}
|
<OC_Entre: "/">
{System.out.println("OC_Entre," + image);}
|
<OC_Menor: "<">
{System.out.println("OC_Menor," + image);}
|
<OC_Mayor: ">">
{System.out.println("OC_Mayor," + image);}
|
<OC_MenorI: "<=">
{System.out.println("OC_MenorI," + image);}
|
<OC_MayorI: ">=">
{System.out.println("OC_MayorI," + image);}
|
<OC_Asignar: "=">
{System.out.println("OC_Asignar," + image);}
|
<OC_Diferente: "!=">
{System.out.println("OC_Diferente," + image);}
|
<OC_Punto: ".">
{System.out.println("OC_Punto," + image);}
|
<OC_Comilla: "'">
{System.out.println("OC_Comilla," + image);}
|
<OC_DComilla: "\"">
{System.out.println("OC_Comilla," + image);}
|
<OC_Igual: "==">
{System.out.println("OC_Igual," + image);}
|
<OC_Increm: "++">
{System.out.println("OC_Increm," + image);}
|
<OC_Decrem: "--">
{System.out.println("OC_Decrem," + image);}
|
<OC_PuntCom: ";">
{System.out.println("OC_PuntCom," + image);}
|
<OC_Espace: "_">
{System.out.println("OC_Espace," + image);}
|
<PR_true: "true">
{System.out.println("PR_true," + image);}
|
<PR_false: "false">
{System.out.println("PR_false," + image);}
|
<T_Int: "int">
{System.out.println("T_Int," + image);}
|
<T_Float: "float64">
{System.out.println("T_Float," + image);}
|
<T_String: "string">
{System.out.println("T_String," + image);}
|
<T_Bool: "bool">
{System.out.println("T_Bool," + image);}
|
<S_admiI: "¡">
{System.out.println("S_admiI," + image);}
|
<S_admiD: "!">
{System.out.println("S_admiD," + image);}
|
<S_gato: "#">
{System.out.println("S_gato," + image);}
|
<S_pesos: "$">
{System.out.println("S_pesos," + image);}
|
<S_and: "&">
{System.out.println("S_and," + image);}
|
<S_interrogaI: "¿">
{System.out.println("S_interrogaI," + image);}
|
<S_interrogaD: "?">
{System.out.println("S_interrogaD," + image);}
|
<#LetraMin: ["a"-"z"]>
|
<#LetraMay: ["A"-"Z"]>
|
<#Numero: ["0"-"9"]>
|
<Number: (<Numero>)+>
{System.out.println("Number," + image);}
|
<Constante: (["+","-"])?(<Numero>)+("."(<Numero>)+)?>
{System.out.println("Constante," + image);}
|
<Variable: (<LetraMin>)+(<LetraMin>|<Numero>)*>
{System.out.println("Variable," + image);}
|
<String: <OC_DComilla>(<OC_Espace>|<Numero>|<LetraMin>|<LetraMay>|(" "))+<OC_DComilla>>
{System.out.println("String," + image);}

}

void prog():
{semantico.limpiarTabla();}
{
try{ <PR_Pkg><PR_Mn>(imp())+ <PR_Funcion><PR_Mn><D_ParentI><D_ParentD><D_LlaveI>(sentencia())+<D_LlaveD>(funcion())*}
catch (ParseException e) {
        Token t;
        JOptionPane.showMessageDialog(null,e.toString(),"ERROR SINTACTICO", JOptionPane.ERROR_MESSAGE);
        //System.out.println(e.toString());
        do {
            t = getNextToken();
        }while (t.kind != OC_PuntCom && t!=null && t.kind != EOF);
    }
}

void imp():
{}
{
try{ <PR_imp><OC_Comilla><PR_fmt><OC_Comilla>PuntoComa() }
catch (ParseException e) {
        Token t;
        JOptionPane.showMessageDialog(null,e.toString(),"ERROR SINTACTICO", JOptionPane.ERROR_MESSAGE);
        //System.out.println(e.toString());
        do {
            t = getNextToken();
        }while (t.kind !=OC_PuntCom  && t!=null && t.kind != EOF);
    }
}
void funcion():
{}
{
try{ <PR_Funcion><Variable><D_ParentI><D_ParentD><D_LlaveI>(sentencia())+<D_LlaveD> }
catch (ParseException e) {
        Token t;
        JOptionPane.showMessageDialog(null,e.toString(),"ERROR SINTACTICO", JOptionPane.ERROR_MESSAGE);
        //System.out.println(e.toString());
        do {
            t = getNextToken();
        }while (t.kind != D_LlaveD && t!=null && t.kind != EOF);
    }
}

void sentencia():
{}
{
try{ ((imprimir())|(decVar())|(CicloIF())|(asignar())|(CicloFOR())) }
catch (ParseException e) {
        Token t;
        JOptionPane.showMessageDialog(null,e.toString(),"ERROR SINTACTICO", JOptionPane.ERROR_MESSAGE);
        //System.out.println(e.toString());
        do {
            t = getNextToken();
        }while (t.kind != OC_PuntCom && t!=null && t.kind != EOF);
    }
}

void imprimir():
{}
{
try{ <PR_fmt><OC_Punto><PR_print><D_ParentI>(<Variable>{semantico.variableInex(token);}(<D_CorchI><Number><D_CorchD>)?|<Constante>|<String>)(<D_Coma><Variable>(<D_CorchI><Number><D_CorchD>)?)*<D_ParentD>PuntoComa() }
catch (ParseException e) {
        Token t;
        JOptionPane.showMessageDialog(null,e.toString(),"ERROR SINTACTICO", JOptionPane.ERROR_MESSAGE);
        //System.out.println(e.toString());
        do {
            t = getNextToken();
        }while (t.kind != OC_PuntCom && t!=null && t.kind != EOF);
    }
}


void decVar():
{}
{
try{ 
    <PR_DV><Variable>
    {
    Token tt=token;
    semanticopo.guardarvariable(tt);
    }
    (<D_CorchI><Number><D_CorchD>(<T_Int>|<T_Float>|<T_String>|<T_Bool>)
    |<T_Int>(<OC_Asignar>(<Number>|<Variable>{semantico.variableInex(token);}))?
    |<T_Float>(<OC_Asignar>(<Constante>|<Number>|<Variable>{semantico.variableInex(token);}))?
    |<T_String>(<OC_Asignar>(<String>|<Variable>{semantico.variableInex(token);}))?
    |<T_Bool>(<OC_Asignar>(<PR_true>|<PR_false>|<Variable>{semantico.variableInex(token);}))?)PuntoComa()
  
}

catch (ParseException e) {
        Token t;
        JOptionPane.showMessageDialog(null,e.toString(),"ERROR SINTACTICO", JOptionPane.ERROR_MESSAGE);
        //System.out.println(e.toString());
        do {
            t = getNextToken();
        }while (t.kind != OC_PuntCom && t!=null && t.kind != EOF);
    }

}


void asignar():
{}
{
try{ <Variable>{semantico.variableInex(token);}(<D_Coma><Variable>)?(<OC_Mas><Variable>)?(<D_CorchI><Number><D_CorchD>)*<OC_Asignar>(<Variable>(<D_Coma><Variable>)?(<OC_Mas><Variable>)?|<Number>|<String>|<Constante>|<PR_true>|<PR_false>)PuntoComa() }
catch (ParseException e) {
        Token t;
        JOptionPane.showMessageDialog(null,e.toString(),"ERROR SINTACTICO", JOptionPane.ERROR_MESSAGE);
        //System.out.println(e.toString());
        do {
            t = getNextToken();
        }while (t.kind != OC_PuntCom && t!=null && t.kind != EOF);
    }
}

void CicloIF():
{}
{
try{ <PR_If>(<Number>|<Variable>)<OC_Espace>(<OC_Mayor>|<OC_MayorI>|<OC_Menor>|<OC_MenorI>)(<Number>|<Variable>)<D_LlaveI>(sentencia())+<D_LlaveD> }
catch (ParseException e) {
        Token t;
        JOptionPane.showMessageDialog(null,e.toString(),"ERROR SINTACTICO", JOptionPane.ERROR_MESSAGE);
        //System.out.println(e.toString());
        do {
            t = getNextToken();
        }while (t.kind !=D_LlaveD  && t!=null && t.kind != EOF);
    }
}
void CicloFOR():
{}
{
try{ <PR_For><Variable><OC_Asignar><Number><OC_PuntCom>(((<Number>(<OC_Mayor>|<OC_MayorI>|<OC_Menor>|<OC_MenorI>)<Number>)<OC_PuntCom><OC_Increm><Variable>)|((<Constante>(<OC_Mayor>|<OC_MayorI>|<OC_Menor>|<OC_MenorI>)<Constante>)<OC_PuntCom><OC_Increm><Constante>)|((<Variable>(<OC_Mayor>|<OC_MayorI>|<OC_Menor>|<OC_MenorI>)<Variable>)<OC_PuntCom><OC_Increm><Variable>))<D_LlaveI>(sentencia())+<D_LlaveD> }
catch (ParseException e) {
        Token t;
        JOptionPane.showMessageDialog(null,e.toString(),"ERROR SINTACTICO", JOptionPane.ERROR_MESSAGE);
        //System.out.println(e.toString());
        do {
            t = getNextToken();
        }while (t.kind != D_LlaveD && t!=null && t.kind != EOF);
    }
}
void PuntoComa():
{}
{
    try 
    {
        <OC_PuntCom> 
    } catch (ParseException e) {
        Token t;
        JOptionPane.showMessageDialog(null,e.toString(),"ERROR SINTACTICO", JOptionPane.ERROR_MESSAGE);
        //System.out.println(e.toString());
        do {
            t = getNextToken();
        }while (t.kind != OC_PuntCom && t!=null && t.kind != EOF);
    }
}












